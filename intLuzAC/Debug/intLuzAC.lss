
intLuzAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000023f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e9  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069c  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000279  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000016e  0000016e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000078  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_3 0000001e  0000013a  0000013a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.light    00000001  00800100  00800100  00000210  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  00000176  00000176  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000178  00000178  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  0000017a  0000017a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000158  00000158  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  00000172  00000172  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
   8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
   c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_3>
  10:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  14:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  18:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  1c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  20:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  24:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  28:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  2c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  30:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  34:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  38:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  3c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  44:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  48:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  4c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  54:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  58:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  5c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  60:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 ac 00 	jmp	0x158	; 0x158 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000016e <__bad_interrupt>:
 16e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

000000c2 <main>:
uint8_t light = 0;

int main(void)
{
	/* PCICR – Pin Change Interrupt Control Register */
	PCICR |= (1 << PCIE0);
  c2:	e8 e6       	ldi	r30, 0x68	; 104
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24
	
	/* PCMSK0 – Pin Change Mask Register 0 */
	PCMSK0 |= (1 << PCINT0);
  cc:	eb e6       	ldi	r30, 0x6B	; 107
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
	
	/* Light Pin */
	DDRB |= (1 << DDB1);
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	84 b9       	out	0x04, r24	; 4
	
	sei (); /* Global interruption */
  dc:	78 94       	sei
	
    while(1)
    {
		if(light == 1)
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x1c>
		{
			PORTB |= (1 << PORTB1);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	89 e6       	ldi	r24, 0x69	; 105
  f0:	98 e1       	ldi	r25, 0x18	; 24
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x30>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x3a>
  fc:	00 00       	nop
			_delay_ms(1000);
			PORTB &= ~(1 << PORTB1);
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	89 e6       	ldi	r24, 0x69	; 105
 108:	98 e1       	ldi	r25, 0x18	; 24
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x48>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x52>
 114:	00 00       	nop
			_delay_ms(1000);
			PORTB |= (1 << PORTB1);
 116:	85 b1       	in	r24, 0x05	; 5
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 e6       	ldi	r24, 0x69	; 105
 120:	98 e1       	ldi	r25, 0x18	; 24
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x60>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x6a>
 12c:	00 00       	nop
			_delay_ms(1000);
			PORTB &= ~(1 << PORTB1);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 b9       	out	0x05, r24	; 5
			
			light = 0;
 134:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 138:	d2 cf       	rjmp	.-92     	; 0xde <main+0x1c>

Disassembly of section .text.__vector_3:

0000013a <__vector_3>:
		}
    }
}

ISR (PCINT0_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
	light = 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000176 <_fini>:
 176:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000178 <__funcs_on_exit>:
 178:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000017a <__simulator_exit>:
 17a:	08 95       	ret

Disassembly of section .text.exit:

00000158 <exit>:
 158:	ec 01       	movw	r28, r24
 15a:	0e 94 bc 00 	call	0x178	; 0x178 <__funcs_on_exit>
 15e:	0e 94 bb 00 	call	0x176	; 0x176 <_fini>
 162:	ce 01       	movw	r24, r28
 164:	0e 94 bd 00 	call	0x17a	; 0x17a <__simulator_exit>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 b9 00 	call	0x172	; 0x172 <_Exit>

Disassembly of section .text._Exit:

00000172 <_Exit>:
 172:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
